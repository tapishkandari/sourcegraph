// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package apiserver

import (
	"context"
	basestore "github.com/sourcegraph/sourcegraph/internal/db/basestore"
	"sync"
)

// MockMetadataStore is a mock implementation of the MetadataStore interface
// (from the package
// github.com/sourcegraph/sourcegraph/internal/workerutil/apiworker/apiserver)
// used for unit testing.
type MockMetadataStore struct {
	// SetIndexLogContentsFunc is an instance of a mock function object
	// controlling the behavior of the method SetIndexLogContents.
	SetIndexLogContentsFunc *MetadataStoreSetIndexLogContentsFunc
}

// NewMockMetadataStore creates a new mock of the MetadataStore interface.
// All methods return zero values for all results, unless overwritten.
func NewMockMetadataStore() *MockMetadataStore {
	return &MockMetadataStore{
		SetIndexLogContentsFunc: &MetadataStoreSetIndexLogContentsFunc{
			defaultHook: func(context.Context, basestore.ShareableStore, int, string) error {
				return nil
			},
		},
	}
}

// NewMockMetadataStoreFrom creates a new mock of the MockMetadataStore
// interface. All methods delegate to the given implementation, unless
// overwritten.
func NewMockMetadataStoreFrom(i MetadataStore) *MockMetadataStore {
	return &MockMetadataStore{
		SetIndexLogContentsFunc: &MetadataStoreSetIndexLogContentsFunc{
			defaultHook: i.SetIndexLogContents,
		},
	}
}

// MetadataStoreSetIndexLogContentsFunc describes the behavior when the
// SetIndexLogContents method of the parent MockMetadataStore instance is
// invoked.
type MetadataStoreSetIndexLogContentsFunc struct {
	defaultHook func(context.Context, basestore.ShareableStore, int, string) error
	hooks       []func(context.Context, basestore.ShareableStore, int, string) error
	history     []MetadataStoreSetIndexLogContentsFuncCall
	mutex       sync.Mutex
}

// SetIndexLogContents delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockMetadataStore) SetIndexLogContents(v0 context.Context, v1 basestore.ShareableStore, v2 int, v3 string) error {
	r0 := m.SetIndexLogContentsFunc.nextHook()(v0, v1, v2, v3)
	m.SetIndexLogContentsFunc.appendCall(MetadataStoreSetIndexLogContentsFuncCall{v0, v1, v2, v3, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetIndexLogContents
// method of the parent MockMetadataStore instance is invoked and the hook
// queue is empty.
func (f *MetadataStoreSetIndexLogContentsFunc) SetDefaultHook(hook func(context.Context, basestore.ShareableStore, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetIndexLogContents method of the parent MockMetadataStore instance
// inovkes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *MetadataStoreSetIndexLogContentsFunc) PushHook(hook func(context.Context, basestore.ShareableStore, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *MetadataStoreSetIndexLogContentsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, basestore.ShareableStore, int, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *MetadataStoreSetIndexLogContentsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, basestore.ShareableStore, int, string) error {
		return r0
	})
}

func (f *MetadataStoreSetIndexLogContentsFunc) nextHook() func(context.Context, basestore.ShareableStore, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *MetadataStoreSetIndexLogContentsFunc) appendCall(r0 MetadataStoreSetIndexLogContentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of MetadataStoreSetIndexLogContentsFuncCall
// objects describing the invocations of this function.
func (f *MetadataStoreSetIndexLogContentsFunc) History() []MetadataStoreSetIndexLogContentsFuncCall {
	f.mutex.Lock()
	history := make([]MetadataStoreSetIndexLogContentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// MetadataStoreSetIndexLogContentsFuncCall is an object that describes an
// invocation of method SetIndexLogContents on an instance of
// MockMetadataStore.
type MetadataStoreSetIndexLogContentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 basestore.ShareableStore
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 int
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c MetadataStoreSetIndexLogContentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c MetadataStoreSetIndexLogContentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
