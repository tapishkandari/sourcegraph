// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package apiserver

import (
	"context"
	basestore "github.com/sourcegraph/sourcegraph/internal/db/basestore"
	"sync"
)

// MockXStore is a mock implementation of the XStore interface (from the
// package
// github.com/sourcegraph/sourcegraph/internal/workerutil/apiworker/apiserver)
// used for unit testing.
type MockXStore struct {
	// SetIndexLogContentsFunc is an instance of a mock function object
	// controlling the behavior of the method SetIndexLogContents.
	SetIndexLogContentsFunc *XStoreSetIndexLogContentsFunc
	// WithFunc is an instance of a mock function object controlling the
	// behavior of the method With.
	WithFunc *XStoreWithFunc
}

// NewMockXStore creates a new mock of the XStore interface. All methods
// return zero values for all results, unless overwritten.
func NewMockXStore() *MockXStore {
	return &MockXStore{
		SetIndexLogContentsFunc: &XStoreSetIndexLogContentsFunc{
			defaultHook: func(context.Context, int, string) error {
				return nil
			},
		},
		WithFunc: &XStoreWithFunc{
			defaultHook: func(basestore.ShareableStore) XStore {
				return nil
			},
		},
	}
}

// NewMockXStoreFrom creates a new mock of the MockXStore interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockXStoreFrom(i XStore) *MockXStore {
	return &MockXStore{
		SetIndexLogContentsFunc: &XStoreSetIndexLogContentsFunc{
			defaultHook: i.SetIndexLogContents,
		},
		WithFunc: &XStoreWithFunc{
			defaultHook: i.With,
		},
	}
}

// XStoreSetIndexLogContentsFunc describes the behavior when the
// SetIndexLogContents method of the parent MockXStore instance is invoked.
type XStoreSetIndexLogContentsFunc struct {
	defaultHook func(context.Context, int, string) error
	hooks       []func(context.Context, int, string) error
	history     []XStoreSetIndexLogContentsFuncCall
	mutex       sync.Mutex
}

// SetIndexLogContents delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockXStore) SetIndexLogContents(v0 context.Context, v1 int, v2 string) error {
	r0 := m.SetIndexLogContentsFunc.nextHook()(v0, v1, v2)
	m.SetIndexLogContentsFunc.appendCall(XStoreSetIndexLogContentsFuncCall{v0, v1, v2, r0})
	return r0
}

// SetDefaultHook sets function that is called when the SetIndexLogContents
// method of the parent MockXStore instance is invoked and the hook queue is
// empty.
func (f *XStoreSetIndexLogContentsFunc) SetDefaultHook(hook func(context.Context, int, string) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SetIndexLogContents method of the parent MockXStore instance inovkes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *XStoreSetIndexLogContentsFunc) PushHook(hook func(context.Context, int, string) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *XStoreSetIndexLogContentsFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, int, string) error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *XStoreSetIndexLogContentsFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, int, string) error {
		return r0
	})
}

func (f *XStoreSetIndexLogContentsFunc) nextHook() func(context.Context, int, string) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *XStoreSetIndexLogContentsFunc) appendCall(r0 XStoreSetIndexLogContentsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of XStoreSetIndexLogContentsFuncCall objects
// describing the invocations of this function.
func (f *XStoreSetIndexLogContentsFunc) History() []XStoreSetIndexLogContentsFuncCall {
	f.mutex.Lock()
	history := make([]XStoreSetIndexLogContentsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// XStoreSetIndexLogContentsFuncCall is an object that describes an
// invocation of method SetIndexLogContents on an instance of MockXStore.
type XStoreSetIndexLogContentsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 int
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c XStoreSetIndexLogContentsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c XStoreSetIndexLogContentsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// XStoreWithFunc describes the behavior when the With method of the parent
// MockXStore instance is invoked.
type XStoreWithFunc struct {
	defaultHook func(basestore.ShareableStore) XStore
	hooks       []func(basestore.ShareableStore) XStore
	history     []XStoreWithFuncCall
	mutex       sync.Mutex
}

// With delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockXStore) With(v0 basestore.ShareableStore) XStore {
	r0 := m.WithFunc.nextHook()(v0)
	m.WithFunc.appendCall(XStoreWithFuncCall{v0, r0})
	return r0
}

// SetDefaultHook sets function that is called when the With method of the
// parent MockXStore instance is invoked and the hook queue is empty.
func (f *XStoreWithFunc) SetDefaultHook(hook func(basestore.ShareableStore) XStore) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// With method of the parent MockXStore instance inovkes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *XStoreWithFunc) PushHook(hook func(basestore.ShareableStore) XStore) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *XStoreWithFunc) SetDefaultReturn(r0 XStore) {
	f.SetDefaultHook(func(basestore.ShareableStore) XStore {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *XStoreWithFunc) PushReturn(r0 XStore) {
	f.PushHook(func(basestore.ShareableStore) XStore {
		return r0
	})
}

func (f *XStoreWithFunc) nextHook() func(basestore.ShareableStore) XStore {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *XStoreWithFunc) appendCall(r0 XStoreWithFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of XStoreWithFuncCall objects describing the
// invocations of this function.
func (f *XStoreWithFunc) History() []XStoreWithFuncCall {
	f.mutex.Lock()
	history := make([]XStoreWithFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// XStoreWithFuncCall is an object that describes an invocation of method
// With on an instance of MockXStore.
type XStoreWithFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 basestore.ShareableStore
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 XStore
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c XStoreWithFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c XStoreWithFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
